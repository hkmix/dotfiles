#+TITLE: Org-Babel Emacs Configuration

* Packages

Initialize:

#+BEGIN_SRC emacs-lisp
  ;; Initialize packaging.
  (package-initialize)

  (require 'package)
  (add-to-list 'package-archives
              '("melpa" . "https://melpa.org/packages/")
              '("marmalade" . "http://marmalade-repo.org/packages/"))
  (when (< emacs-major-version 24)
   ;; For important compatibility libraries like cl-lib.
   (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
  (package-initialize)

  ;; Automatic package installation.
  (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

  (eval-when-compile (require 'use-package))
  (require 'bind-key)

  ;; Always download packages if needed.
  (setq use-package-always-ensure t)

  ;; Enable Quelpa.
  (use-package quelpa
    :init
    (progn
      (setq quelpa-update-melpa-p nil)))
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://framagit.org/steckerhalter/quelpa-use-package.git"))
  (require 'quelpa-use-package)
#+END_SRC

Package list:

#+BEGIN_SRC emacs-lisp
  ;; Package list.
  (use-package column-enforce-mode)

  (use-package company
    :config
    (progn
      (use-package company-flx
        :config
        (company-flx-mode +1))
      (use-package company-lsp
        :config
        (push 'company-lsp company-backends))
      ;; (global-company-mode)
      (setq company-idle-delay 0.3)
      (setq company-tooltip-limit 10)))

  (use-package delight
    :config
    (delight
     '((emacs-lisp-mode "EL" :major)
       (lisp-interaction-mode "EL-I" :major)
       ;; Minor modes.
       (abbrev-mode nil abbrev)
       (auto-revert-mode " ar" autorevert)
       (column-enforce-mode nil column-enforce-mode)
       (company-mode " cp" company)
       (defining-kbd-macro " q..." t)
       (dtrt-indent-mode nil dtrt-indent)

       (editorconfig-mode nil editorconfig)
       (eldoc-mode nil eldoc)
       (evil-commentary-mode nil evil-commentary)
       (flycheck-mode " fc" flycheck)
       (flyspell-mode " fs" flyspell)
       (git-gutter-mode nil git-gutter)
       (isend-mode " is" isend-mode)
       (latex-preview-pane-mode nil latex-preview-pane)
       (lsp-mode " lsp" lsp-mode)
       (pdf-view-midnight-minor-mode nil pdf-tools)
       (projectile-mode " pj" projectile)
       (undo-tree-mode nil undo-tree)
       (visual-line-mode nil t)
       (which-key-mode nil which-key)
       (with-editor-mode nil with-editor)
       (ws-butler-mode nil ws-butler))))

  (use-package dtrt-indent)

  (use-package editorconfig
    :defer t
    :init
    (editorconfig-mode 1))

  (use-package eldoc
    :defer t
    :init
    (global-eldoc-mode 1))

  (use-package emmet-mode
    :defer t)

  (use-package evil
    :config
    (progn
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (defalias #'forward-evil-word #'forward-evil-symbol)
      (define-key evil-normal-state-map "j" 'evil-next-visual-line)
      (define-key evil-normal-state-map "k" 'evil-previous-visual-line)

      (add-to-list 'evil-motion-state-modes 'org-agenda-mode)
      (add-to-list 'evil-normal-state-modes 'recentf-dialog-mode)

      (evil-define-key 'normal dired-mode-map
        "h" 'dired-up-directory
        "j" 'dired-next-line
        "k" 'dired-previous-line
        "l" 'dired-find-alternate-file)
      (use-package evil-leader
        :init
        (progn
          (global-evil-leader-mode)
          (evil-leader/set-leader "<SPC>")
          (evil-leader/set-key
            ;; Global.
            "a"   'align-regexp
            "b"   'switch-to-buffer
            "C"   'compile
            "c"   'recompile
            "d"   'dired
            "e"   'evil-emacs-state
            "f"   'find-file

            ;; Git-Gutter.
            "g s" 'git-gutter:stage-hunk
            "g r" 'git-gutter:revert-hunk
            "g n" 'git-gutter:next-hunk
            "g p" 'git-gutter:previous-hunk

            "h"   'recentf-open-files

            ;; Isend-mode.
            "i a" 'isend-associate
            "i s" 'isend-send
            "i S" 'isend-send-buffer

            "k b" 'kill-buffer
            "m"   'magit-status

            ;; Open files.
            "o C" 'my/edit-config
            "o I" 'my/edit-init
            "o A" 'my/open-planner

            ;; Projectile.
            "p g" 'projectile-grep
            "p h" 'projectile-recentf
            "p b" 'projectile-switch-to-buffer
            "p p" 'my/projectile-find-file-or-switch-project
            "p s" 'projectile-run-shell

            ;; Tabs.
            "t n" 'elscreen-create
            "t d" 'elscreen-kill
            "T"   'elscreen-toggle-display-tab

            "r"   'revert-buffer
            "R"   'ruler-mode
            "q q" 'fill-paragraph
            "w w" 'window-configuration-to-register
            "w r" 'jump-to-register
            "x"   'smex)

          (evil-leader/set-key-for-mode 'c++-mode
            "A"   'ff-find-alternate-file)

          (evil-leader/set-key-for-mode 'latex-mode
            "]"   'latex-close-block
            "L"   'latex-preview-pane-mode
            "l"   'my/update-latex-preview)

          (evil-leader/set-key-for-mode 'org-mode
            "<SPC> TAB" 'outline-show-all
            "<SPC> <backtab>" 'org-shifttab
            "<SPC> a" 'org-agenda
            "<SPC> b" 'org-backward-heading-same-level
            "<SPC> c" 'org-ctrl-c-ctrl-c
            "<SPC> d" 'org-deadline
            "<SPC> e" 'org-export-dispatch
            "<SPC> f" 'org-forward-heading-same-level
            "<SPC> l" 'my/update-latex-preview-org
            "<SPC> N" 'org-babel-next-src-block
            "<SPC> n" 'org-next-visible-heading
            "<SPC> o" 'my/open-at-point
            "<SPC> P" 'org-babel-previous-src-block
            "<SPC> p" 'org-previous-visible-heading
            "<SPC> r" 'org-reveal
            "<SPC> s" 'my/org-sorter)

          (evil-leader/set-key-for-mode 'rust-mode
            "F"   'rust-enable-format-on-save
            "f"   'rust-format-buffer)))
      (use-package evil-commentary
        :config
        (evil-commentary-mode 1))
      (use-package evil-magit)
      (use-package evil-matchit
        :config
        (global-evil-matchit-mode 1))
      (use-package evil-surround
        :config
        (global-evil-surround-mode 1))
      (quelpa '(evil-tabs :fetcher github :repo "hkmix/evil-tabs"))
      (use-package evil-tabs
        :config
        (progn
          (global-evil-tabs-mode t)
          (setq elscreen-tab-display-control nil)
          (setq elscreen-tab-display-kill-screen nil)
          (elscreen-toggle-display-tab)))
      (evil-mode 1)))

  (use-package eyebrowse
    :config
    (progn
      (eyebrowse-mode t)
      (eyebrowse-setup-opinionated-keys)))

  (use-package exec-path-from-shell
    :config
    (progn
      (when (memq window-system '(mac ns x))
        (setq exec-path-from-shell-check-startup-files nil)
        (exec-path-from-shell-initialize))))

  (use-package flycheck
    :defer t
    :config
    (progn
      (use-package flycheck-mypy)
      (global-flycheck-mode)))

  (use-package git-gutter
    :defer t
    :bind
    (("C-c g s" . git-gutter:stage-hunk)
     ("C-c g r" . git-gutter:revert-hunk)
     ("C-c g n" . git-gutter:next-hunk)
     ("C-c g p" . git-gutter:previous-hunk))
    :config
    (progn
      (global-git-gutter-mode t)
      (git-gutter:linum-setup)))

  (use-package ido
    :config
    (progn
      (ido-mode 1)
      (ido-everywhere 1)
      (use-package flx-ido
        :config
        (progn
          (flx-ido-mode 1)
          (setq ido-enable-flex-matching t)
          (setq ido-use-faces nil)))
      (use-package ido-completing-read+
        :config
        (ido-ubiquitous-mode 1))
      (use-package ido-vertical-mode
        :config
        (progn
          (ido-vertical-mode 1)
          (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)))
      (use-package smex
        :bind
        (("M-x" . smex)
         ("M-X" . smex-major-mode-commands)
         ("C-c M-x" . execute-extended-command))
        :config
        (smex-initialize))))

  (use-package isend-mode)

  (use-package latex-preview-pane
    :defer t)

  (use-package lsp-mode
    :commands
    lsp
    :config
    (progn
      (use-package ccls
        :init
        (setq ccls-executable "/usr/local/bin/ccls"))
      (use-package lsp-ui)
      (add-hook 'lsp-mode-hook 'lsp-ui-mode)
      (add-hook 'lsp-mode-hook 'flycheck-mode)))

  (use-package magit
    :bind
    ("C-c m" . magit-status))

  (use-package nasm-mode)

  (use-package org-ref)

  (quelpa
   '(pdf-tools
     :fetcher github
     :repo "seanfarley/pdf-tools"
     :branch "retina"
     :files
     ("lisp/*.el"
      "README"
      ("build" "Makefile")
      ("build" "server")
      (:exclude "lisp/tablist.el" "lisp/tablist-filter.el"))))
  (use-package pdf-tools
    :init
    (progn
      (setq my/pdf-tools-bin-dir
            (substitute-in-file-name "$HOME/.emacs.d/bin"))
      (make-directory my/pdf-tools-bin-dir t)
      (setq pdf-info-epdfinfo-program (concat my/pdf-tools-bin-dir "/epdfinfo"))
      (pdf-tools-install)))

  (use-package projectile)

  (use-package recentf
    :config
    (add-to-list 'recentf-exclude "/elpa/")
    (add-to-list 'recentf-exclude "/var/folders/")
    (recentf-mode 1))

  (use-package solarized-theme
    :init
    ;; Package configurations must be pre-theme setting.
    (progn
      (setq solarized-use-variable-pitch nil)
      (setq solarized-height-minus-1 1.0)
      (setq solarized-height-plus-1 1.0)
      (setq solarized-height-plus-2 1.0)
      (setq solarized-height-plus-3 1.0)
      (setq solarized-height-plus-4 1.0)))

  (use-package try)

  (use-package which-key
    :config
    (which-key-mode))

  (use-package ws-butler
    :init
    (progn
      (define-globalized-minor-mode global-ws-butler-mode ws-butler-mode
        (lambda ()
          (ws-butler-mode t))))
    :config
    (global-ws-butler-mode t))
#+END_SRC

Packages for file types:

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)

  (use-package markdown-mode
    :config
    (use-package markdown-preview-eww))

  (use-package tuareg)

  (use-package yaml-mode)
#+END_SRC

* Functions

Functions should come after packages.

#+BEGIN_SRC emacs-lisp
  ;; Edit the init file.
  (defun my/edit-init ()
    "Edit the Emacs init file."
    (interactive)
    (find-file user-init-file))

  (defun my/edit-config ()
    "Edit the Emacs configuration file."
    (interactive)
    (find-file (expand-file-name (concat user-emacs-directory "config.org"))))

  ;; Force open file in Emacs.
  (defun my/open-at-point ()
    "Force open file at point in Emacs."
    (interactive)
    (org-open-at-point t))

  ;; Custom multi-sort for Org-mode.
  (defun my/org-sorter ()
    "Sort Org-mode entries by deadline then state."
    (interactive)
    (org-sort-entries t ?d)
    (org-sort-entries t ?o))

  ;; Invoke projectile-find-file if we are in a project, or start the switcher.
  (defun my/projectile-find-file-or-switch-project ()
    "Invoke Projectile file finder if in a project, else start project switcher."
    (interactive)
    (if (projectile-project-p)
        (projectile-find-file)
      (projectile-switch-project)))

  ;; Refresh LaTeX preview pane.
  (defun my/update-latex-preview ()
    "Update LaTeX preview pane."
    (interactive)
    (evil-window-right 1)
    (revert-buffer)
    (evil-window-left 1))

  ;; Refresh Org-mode latex.
  (defun my/update-latex-preview-org ()
    "Update LaTeX preview pane in Org-mode."
    (interactive)
    (org-latex-export-to-pdf t)
    ;; The function below is only needed if we are using PDF-tools.
    ;; (my/update-latex-preview).
    )

  (defun my/split-window-left ()
    "Split the window to the right and move to it."
    (interactive)
    (split-window-right)
    (evil-window-right 1))

  (defun my/split-window-above ()
    "Split the window below and move to it."
    (interactive)
    (split-window-below)
    (evil-window-below 1))

  ;; Edit the init file.
  (defun my/open-planner ()
    "Edit the planner file."
    (interactive)
    (find-file "~/Drive/planner.org"))
#+END_SRC

* Appearance

#+BEGIN_SRC emacs-lisp
  ;; GUI settings.
  ; Enable for macOS to prevent losing focus (emacs-mac port).
  (menu-bar-mode (eq system-type 'darwin))
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (blink-cursor-mode 0)

  (defun add-to-frame-lists (setting)
    "Add SETTING to both `default-frame-alist` and `initial-frame-alist`."
    (add-to-list 'default-frame-alist setting)
    (add-to-list 'initial-frame-alist setting))

  (if (eq system-type 'darwin)
      (progn
        ;; Use a slightly larger size for macOS.
        (defconst default-font "Iosevka Slab-16")
        ;; Window appearance.
        (add-to-frame-lists '(ns-transparent-titlebar . t))
        (add-to-frame-lists '(ns-appearance . dark))
        (defconst ns-use-proxy-icon nil))
    (defconst default-font "Iosevka Slab-12"))
  (set-face-attribute 'default nil :font default-font)
  (add-to-frame-lists (cons 'font default-font))
  (add-to-frame-lists '(height . 24))
  (add-to-frame-lists '(width . 80))
  (add-to-frame-lists '(background-mode . dark))
  (setq frame-title-format "")
  (xterm-mouse-mode)

  (load-theme 'solarized-dark t)
  (set-frame-parameter nil 'background-mode 'dark)
  (set-terminal-parameter nil 'background-mode 'dark)

  ;; Modeline settings.
  (column-number-mode)

  ;; Editing area settings.
  (show-paren-mode t)
  (global-hl-line-mode t)
  (setq scroll-margin 6)

  ;; Disable start-up screen.
  (setq inhibit-startup-screen t)
#+END_SRC

* Bindings

#+BEGIN_SRC emacs-lisp
  ;; General key bindings.
  (global-unset-key (kbd "C-w"))
  (global-set-key (kbd "C-w C-h") 'windmove-left)
  (global-set-key (kbd "C-w C-j") 'windmove-down)
  (global-set-key (kbd "C-w C-k") 'windmove-up)
  (global-set-key (kbd "C-w C-l") 'windmove-right)

  (global-set-key (kbd "C-w h") 'windmove-left)
  (global-set-key (kbd "C-w j") 'windmove-down)
  (global-set-key (kbd "C-w k") 'windmove-up)
  (global-set-key (kbd "C-w l") 'windmove-right)

  (global-set-key (kbd "C-w H") 'evil-window-move-far-left)
  (global-set-key (kbd "C-w J") 'evil-window-move-very-bottom)
  (global-set-key (kbd "C-w K") 'evil-window-move-very-top)
  (global-set-key (kbd "C-w L") 'evil-window-move-far-right)

  ;; Fix ESC key in Evil mode.
  ;;; esc quits.
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (global-set-key [escape] 'evil-exit-emacs-state)
#+END_SRC

* Editing

#+BEGIN_SRC emacs-lisp
  ;; Editing options.
  (setq default-buffer-file-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq initial-scratch-message nil)
  (setq vc-follow-symlinks t)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default fill-column 79)
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))

  (electric-pair-mode)
  (global-visual-line-mode)

  ;; Move backups to temp directory.
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  ;; Prevent killing to clipboard.
  ; (when (eq system-type 'darwin)
  ;   (setq select-enable-clipboard nil))

  (setq mouse-drag-copy-region t)
#+END_SRC

* Filetype mappings

#+BEGIN_SRC emacs-lisp
  ;; Custom filetype mappings.
  (add-to-list 'auto-mode-alist '("\\.editorconfig\\'" . editorconfig-conf-mode))
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
#+END_SRC

* Hooks

#+BEGIN_SRC emacs-lisp
  ;; All coding modes.
  (add-hook 'prog-mode-hook
            (lambda ()
              (linum-mode 1)
              (company-mode 1)
              (80-column-rule)))

  ;; All text-editing modes.
  (add-hook 'text-mode-hook
            (lambda ()
              (flyspell-mode 1)))

  ;; Org-mode key bindings.
  (require 'org)
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c l") 'org-store-link)
              (local-set-key (kbd "C-c a") 'org-agenda)))

  ;; C/C++.
  (add-hook 'c-mode-common-hook
            (lambda ()
              (local-set-key (kbd "C-c o") 'ff-find-other-file)
              (lsp)
              (dtrt-indent-mode 1)
              (eldoc-mode 1)))

  ;; DocView.
  ;; Resolution.
  (require 'doc-view)
  (setq doc-view-resolution 200)

  ;; PDF view bindings.
  (require 'pdf-tools)
  (add-hook 'pdf-view-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c C-m") 'pdf-view-midnight-minor-mode)
              (local-set-key (kbd "t") 'evil-tabs-goto-tab)))

  ;; LaTeX.
  ;; Prevent pairing for $.
  (add-hook 'latex-mode-hook
            (lambda ()
              (linum-mode 1)
              (setq-default electric-pair-inhibit-predicate
                            (lambda (c)
                              (if (eq "$" c)
                                (electric-pair-default-inhibit c)
                                t)))))

  ;; Allow revert of PDF files without confirmation.
  (setq revert-without-query (quote (".*\.pdf")))

  ;; Rust.
  (add-hook 'rust-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command) "cargo run")))

  ;; Web.
  (add-hook 'css-mode-hook  'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
#+END_SRC

* Miscellaneous

#+BEGIN_SRC emacs-lisp
  ;; Silence some warnings.
  (setq ad-redefinition-action 'accept)
  (setq exec-path-from-shell-arguments '("-l"))

  ;; Disable system dialogue boxes.
  (setq use-dialog-box nil)

  ;; Use y/n instead of yes/no.
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Fix MacOS meta key.
  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'meta)
    (setq mac-right-option-modifier 'meta))

  ;; Fix MacOS paste.
  ; (when (eq system-type 'darwin)
  ;   (progn
  ;     (defun my/pbpaste ()
  ;       "Paste data from pasteboard."
  ;       (interactive)
  ;       (shell-command-on-region
  ;        (point)
  ;        (if mark-active (mark) (point))
  ;        "pbpaste" nil t))
  ;     (setq interprogram-paste-function 'my/pbpaste)))
#+END_SRC

* Org-mode

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (require 'ox-latex)

  ;; General appearance.
  (setq org-hide-emphasis-markers t)

  ;; Source block tweaks.
  (setq org-src-fontify-natively t)

  ;; Set languages.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (haskell . t)
     (latex . t)
     (python . t)
     (shell . t)))

  ;; Hooks.
  (add-hook 'org-mode-hook
            (lambda ()
              (linum-mode 1)))

  ;; Agenda settings.
  ;; Start on Sunday.
  (setq org-agenda-start-on-weekday 0)

  ;; States.
  (setq org-todo-keywords
        '((sequence "IN-PROGRESS" "NEXT" "TODO" "|" "DONE")))

  ;; Export settings.
  (setq org-latex-listings 'minted)
  (setq org-latex-packages-alist
        '(("" "booktabs")
          ("labelfont=bf,labelsep=period" "caption")
          ("" "cleveref")
          ("" "dsfont")
          ("" "float")
          ("margin=1in" "geometry")
          ("" "lastpage")
          ("headsepline" "scrlayer-scrpage")))
  (setq org-latex-minted-options
        '(("linenos")
          ("breaklines")
          ("xleftmargin" "2em")))
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (setq org-latex-tables-booktabs t)

  ;; Use koma-script document classes.
  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
                 '("koma-article"
                   "\\documentclass[paper=letter,parskip=half,headings=standardclasses]{scrartcl}
  \\usepackage{minted}
  \\usemintedstyle{borland}
  \\renewcommand{\\labelitemi}{{--}}
  \\renewcommand{\\labelitemii}{{--}}
  \\renewcommand{\\labelitemiii}{{--}}
  \\renewcommand{\\labelitemiv}{{--}}
  \\clearpairofpagestyles{}
  \\setkomafont{pagehead}{\\normalfont}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  (setq org-latex-default-class "koma-article")
  (setq org-export-with-smart-quotes t)
  (setq org-export-in-background t)
  (setq org-latex-default-figure-position "H")

  ;; Use cleveref package for references.
  (require 'org-ref)
  (org-link-set-parameters "ref" :export
                           (lambda (label desc format)
                             (format "\\cref{%s}" label)))
  (setq org-ref-default-ref-type "Cref")
  (defun org-latex-ref-to-cref (text backend info)
    "Use \\cref instead of \\ref in latex export."
    (when (org-export-derived-backend-p backend 'latex)
      (replace-regexp-in-string "\\\\ref{" "\\\\cref{" text)))

  (add-to-list 'org-export-filter-final-output-functions
               'org-latex-ref-to-cref)

  ;; Custom header format.
  (setq org-format-latex-header
        "\\documentclass{article}
  \\usepackage[usenames]{color}
  [PACKAGES]
  [DEFAULT-PACKAGES]
  \\pagestyle{empty}             % do not remove
  \\usemintedstyle{borland}
  \\renewcommand{\\labelitemi}{{--}}
  \\renewcommand{\\labelitemii}{{--}}
  \\renewcommand{\\labelitemiii}{{--}}
  \\renewcommand{\\labelitemiv}{{--}}
  \\clearpairofpagestyles{}
  \\setkomafont{pagehead}{\\normalfont}")

  (setq org-goto-interface 'outline-path-completion)

  ;; Set link opening defaults.
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
